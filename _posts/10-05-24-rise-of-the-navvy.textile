---
layout: post
title: Rise of the Navvy
excerpt: "The what, why and how of the database agnostic Ruby background job processor."
published: true
category: navvy
---

It all started on a cold winter's day in December of 2009 as I decided to start a personal project using "MongoMapper":http://mongomapper.com, which needed to run background jobs.

Back then, ["@collectiveidea(Collective Idea)":http://twitter.com/collectiveidea]'s "delayed_job fork":http://github.com/collectiveidea/delayed_job was still tightly mingled with "ActiveRecord":http://api.rubyonrails.org/classes/ActiveRecord/Base.html, so I couldn't just pop that in as I normally would. After failing to find good alternatives I stumbled upon ["@zbelzer(Zach Belzer)":http://twitter.com/zbelzer]'s "fork":http://github.com/zbelzer/delayed_job in which he did an "&ldquo;initial attempt at MongoDB support&rdquo;":http://github.com/zbelzer/delayed_job/commit/1ad8eab91786f262f4d4bfeab0a76c1517c06e7e. I decided to go with that.

I found a couple of problems with Zach's fork -- it was based on ["@tobi(Tobias LÃ¼tke)":http://twitter.com/tobi]'s "original delayed_job":http://github.com/tobi/delayed_job to name one -- , so I created a Mongo based fork based on Zach's work myself.

While working on that, it didn't take me long to realize that I was rewriting stuff I'd never really need to use. So, I decided to create a simple, database agnostic background job processor myself and I called it "Navvy":http://jeffkreeftmeijer.com/navvy.

<object width="450" height="360">
  <param name="movie" value="http://www.youtube.com/v/5CU7oAS2XkY&hl=en_US&fs=1&"></param>
  <param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param>
  <embed src="http://www.youtube.com/v/5CU7oAS2XkY&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="450" height="260"></embed>
</object>

bq. Navvy is a shorter form of navigator (UK) or navigational engineer (USA) and is particularly applied to describe the manual labourers working on major civil engineering projects.
-- "Wikipedia":http://en.wikipedia.org/wiki/Navvy

I initially built Navvy with MongoMapper and ActiveRecord adapters, but "@antekpiechnik(Antek Piechnik)":http://twitter.com/antekpiechnik came out of nowhere and created an adapter for "Sequel":http://sequel.rubyforge.org/. In the spirit of the "January 16 and 17 Bugmash":http://railsbridge.org/news_items/10, "@matsimitsu(Robert Beekman)":http://twitter.com/matsimitsu and I jumped in to get the whole thing up to speed with Rails 3.

h3. &ldquo;Aren't you the guy who built Navvy?&rdquo;

After "announcing":http://www.rubyflow.com/items/3280 it, it didn't take long before "Ruby5":http://ruby5.envylabs.com/episodes/45-episode-43-january-19-2010/stories/350-navvy-database-agnostic-background-jobs picked it up and people started actually using it. It was great to hear that "@jnunemaker(John Nunemaker)":http://twitter.com/jnunemaker/status/7996463096 decided to use Navvy in "Harmony":http://harmonyapp.com.

"The Changelog":http://thechangelog.com/post/356754061/navvy-simple-database-agnostic-ruby-background-job-proce did a post on Navvy, which meant it became a featured repo on "Github Explore":http://github.com/explore for about a week, John gave another hat tip on "Episode 0.1.1 of the Changelog":http://thechangelog.com/post/360070705/episode-0-1-1-john-nunemaker-from-mongomapper and more and more people started "contributing":http://wiki.github.com/jeffkreeftmeijer/navvy/contributors.

Thanks to everyone who helped build, fix bugs and get the word out about the project. It was a crazy ride and I can never get enough of the &ldquo;Aren't you the guy who built Navvy?&rdquo;-question. Feels good, thanks.

h3. Future

"delayed_job 2":http://thechangelog.com/post/495099940/delayed-job-hits-2-0 got released a while back adding support for multiple backends. Although database agnosticism was the first and most important goal for Navvy, I think there's still a place for both, since there are still some cool things in Navvy (You can "use it in pure Ruby":http://wiki.github.com/jeffkreeftmeijer/navvy/installation-usage-in-pure-ruby for example).

Today, Navvy has a "DataMapper":http://datamapper.org/ adapter, job priorities, the ability to retry failed jobs and it's own daemon. It's been a bit quiet around Navvy for the last couple of weeks, but I've been working on a "Mongoid adapter":http://github.com/jeffkreeftmeijer/navvy/commits/feature/mongoid with "@TomK32(Thomas R. Koll)":http://twitter.com/tomk32, together with some other stuff that I hope to release soon.

I'm excited to continue working on Navvy. Stay tuned!
