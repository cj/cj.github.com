---
layout: post
title: Git your act together
excerpt: Explaining some things that I think would make using Git a bit more enjoyable when working in a team.
published: true
---

Last week I released "an article on git-flow":http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/, a tool that helps you keep your "Git":http://git-scm.com/ repositories organized. Today I'd like to explain some things that tend to annoy me while working with other people and using Git.

This article possibly won't tell you anything you didn't know already, but I just wanted to get this out there and tell you some things that I think would make working with Git a bit more enjoyable.

h3. Write good commit messages

"Commit messages are important":http://wildbit.com/blog/2008/11/11/the-importance-of-commit-messages/. They document the project's progress and they're a great way to see what has been done in a commit without having to read the code. Also, commit messages make it easy to dive into @git log@ and find that commit you want to review or revert.

Obviously, you should think about your commit message before typing @git commit -m '@, slamming your hand on your keyboard, adding the last @'@ and pressing return. Yes, people actually do that.

Another thing is trying to be funny in their messages, blaming other people for writing bad code or writing stuff like &ldquo;I don't know what the hell I was thinking.&rdquo;. Newsflash: You're not funny, you're being an idiot.

Check out "whatthecommit.com":http://whatthecommit.com for more bad examples.

I don't want to know how you feel, what you ate, what time it is or who fucked up in the first place. Please tell me what you did and _how_ you did it. Don't try to be clever, witty or funny. Document your change as good as you can and nothing else.

&ldquo;["A note about Git commit messages":http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html]&rdquo; by "@tpope(Tim Pope)":http://twitter.com/tpope/ might be a good read if you think you need some guidelines.

<a name="commit-all-the-fucking-time"></a>

h3. Commit all the fucking time

You're at work and your client sends you an email saying he wants a couple of small bugs fixed and the header to be blue instead of green. Other than the rest of your clients, he's right: these are really small bugs and changing the header's color is just a one-line change.

After getting yourself some coffee, you fix the bugs and change the header in about five minutes. You commit everything:

{% highlight console %}
commit 32faa25585e162f82206b8ce791ec098d6e34677
Author: Jeff Kreeftmeijer
Date:   Mon Aug 23 11:27:10 2010 +0200

  Fix some bugs and make the header blue.
{% endhighlight %}

After some time and some commits, the client calls you and asks you to undo the header's background color back to green. What do you do now?

You can't @git revert 32faa25585e162f82206b8ce791ec098d6e34677@, because that will bring back the bugs you fixed in that commit too. You'll have to manually check what the original hue of green was and change it back.

Seriously. Just commit one thing at a time. Don't wait until you go home, don't fix three _really_ simple bugs before committing, commit _every single change separately_.

<a name="rebase-and-amend-to-get-rid-of-oops-commits"></a>

h3. Rebase & --amend to get rid of &ldquo;oops&rdquo;-commits

Let's say you wrote this:

{% highlight ruby %}
def started
  update_attributes({
    :started_at =>  Time.now
  }
end
{% endhighlight %}

And you committed it:

{% highlight console %}
commit a5d8e964f6ac22809ffcd7d38ec503e36a27e00b
Author: Jeff Kreeftmeijer
Date:   Mon Aug 23 15:11:10 2010 +0200

  Add Task#start to set the started_at attribute to the current time.
{% endhighlight %}

After you committed, you find out that you missed the closing parenthesis on line four. You quickly fix it and commit the new version:

{% highlight console %}
commit b3ff4620c2accd674427322cd1c10d634ab63d3a
Author: Jeff Kreeftmeijer
Date:   Mon Aug 23 15:14:48 2010 +0200

  Oops! Forgot the closing parenthesis in Task#start.
{% endhighlight %}

It might happen that the second commit didn't fix everything either and you have to commit a fix again. Maybe once more, because it's been a long day. You'd end up with a bunch of commits fixing problems caused by previous commits.

Well, now it works. After a week you don't like this method anymore and want to remove it, which should be easy because you committed small chunks, right? No. You can't just @git revert a5d8e964f6ac22809ffcd7d38ec503e36a27e00b@, you'll have to revert both separately.

Whenever you find yourself writing &ldquo;oops&rdquo; because you're fixing a mistake you made in the last commit, please "rebase":http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html them into one. Don't worry, it sounds harder than it is.

Let's stick with the example we used above. We want to squash the last _two_ commits into one:

bc. git rebase -i HEAD~2

A text editor opens and shows you something like this:

{% highlight console %}
pick a5d8e96 Add Task#start to set the started_at attribute to the current time.
pick b3ff462 Oops! Forgot the closing parenthesis in Task#start.

# Rebase a5d8e96..b3ff462 onto a5d8e96
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
{% endhighlight %}

If you replace the second occurrence of &ldquo;pick&rdquo; with &ldquo;squash&rdquo; and save, another text editor pops up asking you to write a new commit message. After you saved that one, your commits will be merged into one, making your repository cleaner and allowing you to @git revert@ the whole thing at once.

If you want more information about rebasing, be sure to read &ldquo;["Squashing commits with Rebase":http://www.gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html]&rdquo; on "Git Ready":http://www.gitready.com.

If the commit you want to squash into is the last commit, you can even directly add new changes to it by using the @--amend@ flag when committing:

{% highlight console %}
  git commit --amend
{% endhighlight %}

h3. I'm not perfect either

Before you start digging through my repositories: I've learned a lot in the last couple of months and I'm improving, but I'm not perfect either. I'd love to learn what you do to keep your Git repositories maintainable, so be sure to put your best tip in the comments.
