---
layout: post
title: Don't put your *.gemspec in your Rakefile
excerpt: Why *.gemspecs in repositories aren't as stupid as I thought and why Rakefiles don't have anything to do with anything.
---

Yesterday I wrote "&ldquo;.gitignore your *.gemspec&rdquo;":http://jeffkreeftmeijer.com/2010/gitignore-your-gemspec, an article about how annoying it is to have your .gemspec in your repository.

Just to be clear; I was _not_ talking about completely removing .gemspecs from gems and I was _not_ talking to people writing their .gemspecs themselves. My previous post was about using "Jeweler":http://github.com/technicalpickles/jeweler. When using Jeweler, you put your gem information in your Rakefile and generate your .gemspec when you need it. 

The problem I found with this was people unnecessarily updating the .gemspec file -- it's as easy as running @rake .gemspec@ -- in patches, so I suggested to stop putting .gemspecs in gem repositories.

I think I started a discussion.

"@rbates made a comment":http://twitter.com/rbates/status/11487541301 about five minutes after I posted. Here's the deal; "Bundler":http://gembundler.com has the ability bundle a library from its git repository or from a local path by specifying this in your Gemfile:

{% highlight ruby %}
# from git
gem 'yourgem', :git => 'git://github.com/user/yourgem.git'

# from a local path
gem 'yourgem', :path => '~/code/yourgem.git'
{% endhighlight %}

If you load a library like this, it _does_ need to have a .gemspec in its code if it has any dependencies, otherwise Bundler will be unable to resolve and include these dependencies in the bundle.

"@joshpeek suggests":http://twitter.com/joshpeek/statuses/11489775203 that Jeweler shouldn't even have to write a .gemspec file, but "@wycats eventually wrote a blogpost":http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended about adding .gemspecs to your repositories &ldquo;as intended&rdquo;. Be sure to read it.

I started thinking about other solutions to the initial problem of people updating .gemspecs and wondered; Why are we putting our .gemspecs in our Rakefiles? Is the Rakefile really a place for gem information?

From the replies to my blogpost, a lot of people were just updating their .gemspecs themselves. I opened one of my .gemspec files and didn't remember why I had to generate all this.

You don't _need_ a tool to generate a .gemspec for you, it's as simple as:

{% highlight ruby %}
Gem::Specification.new do |gem|
  gem.name    = 'yourgem'
  gem.version = '0.0.1'
  gem.date    = Date.today.to_s
  
  gem.summary = "an awesome gem"
  gem.description = "extended description"
  
  gem.authors  = ['Me Myself', 'One Other']
  gem.email    = 'me@example.com'
  gem.homepage = 'http://github.com/user/yourgem'
  
  # ensure the gem is built out of versioned files
  gem.files = Dir['Rakefile', '{bin,lib,man,test,spec}/**/*',
                  'README*', 'LICENSE*'] & `git ls-files -z`.split("\0")
end
{% endhighlight %}

If you're extremely lazy, check out "@mislav's TextMate snippet":http://gist.github.com/356455 that generates a new gemspec just by typing @gemspec@.

The file is easy to read and easy to update. To release a gem, do:

<pre>
$ gem build gem.gemspec
$ gem push gem-0.0.1.gem
</pre>

This solves the issue of having your gem information in your repository twice -- in your Rakefile and in your .gemspec -- and will probably keep people from updating it unintentionally when patching your gem. 

So, In my previous article I didn't consider installing gems from git or a local path. Right now, you _do_ need your .gemspec in your repository when you want your users to be able to do that.
