---
layout: post
title: Acceptance testing using Capybara's new RSpec DSL
excerpt: Capybara turned carnivore and devoured Steak.
published: true
---


I've been using "Steak":https://github.com/cavalle/steak for almost a year now. It's an "RSpec":https://github.com/rspec extension by "@cavalle(Luismi Cavall√©)":http://twitter.com/cavalle to allow you to get up and running doing acceptance testing. Since then I "wrote":http://jeffkreeftmeijer.com/2010/steak-because-cucumber-is-for-vegetarians and "talked":http://jeffkreeftmeijer.com/2011/herbivore-carnivore about it a lot and it definitely helped me to get into acceptance testing without having to get out of RSpec and writing tests in English.

What a lot of people don't know is that Steak is nothing more than a bunch of aliases and generators. This doesn't mean that it doesn't make your work easier or that it's a "scam":http://twitter.com/#!/wycats/status/26769271290, but it's not a completely separate testing library. It's essentially just a tool to make it easier to get "Capybara":https://github.com/jnicklas/capybara running on RSpec.

!http://jeffkreeftmeijer.com/images/carnivore_capybara.png!
<span class="small">Carnivore Capybara!!!1 Roaargh!</span>

Back when Steak was first released, Capybara didn't have any of the nice RSpec helpers it does now. A lot has changed since. Besides the helpers, "it got its own RSpec acceptance testing DSL":https://github.com/jnicklas/capybara/commit/f4897f890d8dd33215fef238902988e8823a6539 recently, essentially eating Steak's functionality and turning it into a complete acceptance testing solution (on top of RSpec).

h3. Acceptance testing with Capybara

The DSL is'nt officially released yet, but "it will be available in Capybara 1.0":http://twitter.com/#!/jncoward/status/36102623924850688. Right now, you'll have to get it from git if you want to use it.

Let's say you're working on a Rails project using Bundler. Simply add RSpec and Capybara to your @Gemfile@:

{% highlight ruby%}
group :test do
  gem 'rspec-rails'
  gem 'capybara', :git => 'git://github.com/jnicklas/capybara.git'
end
{% endhighlight %}

After running @bundle install@, set up RSpec like you're used to:

{% highlight console %}
$ rails g rspec:install
      create  .rspec
      create  spec
      create  spec/spec_helper.rb
{% endhighlight %}

Capybara doesn't have any generators for its new DSL, but that shouldn't be a problem. Setting it up is quite easy, just add a file named @spec/acceptance/acceptance_helper.rb@. In this file, we'll require @spec/spec_helper.rb@ to make RSpec available. We'll also require Capybara's RSpec helper file:

{% highlight ruby %}
require 'rspec'
require 'capybara/rspec'
{% endhighlight %}

Capybara will now automatically hook into RSpec and allow you to write your first test. See? I told you we weren't going to need any generators. Let's write a spec named @spec/acceptance/articles_spec.rb@:

{% highlight ruby %}
require 'acceptance/acceptance_helper'

feature "Articles", %q{
  In order to have an awesome blog
  As an author
  I want to create and manage articles
} do

  background do
    Article.create!(:title => 'One')
    Article.create!(:title => 'Two')
  end

  scenario "Article index" do
    visit '/articles'
    page.should have_content('One')
    page.should have_content('Two')
  end

end
{% endhighlight %}

As you can see, we're using methods like @feature@, @background@ and @scenario@ instead of @context@, @before@ and @example@, just like we did in Steak. Now, you can run your new spec like any other RSpec test:

{% highlight console %}
$ rspec spec/acceptance/articles_spec.rb
{% endhighlight %}

There you go. A complete acceptance testing solution including the acceptance testing slang, without generators and just a couple of lines of code. What do you think? Do you have any ideas to make this more awesome? Definitely let me know!
