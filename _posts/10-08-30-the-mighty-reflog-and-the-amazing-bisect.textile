---
layout: post
title: The mighty reflog and the amazing bisect
excerpt: Telling you what Git's reflog and bisect do and why they're awesome.
published: true
---

This week I want to take the time to tell you what ["Git":http://git-scm.com/]'s "reflog":http://www.kernel.org/pub/software/scm/git/docs/git-reflog.html and "bisect":http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html commands do and give you a use-case for both so you know when you can actually _use_ them.

This might be old news for you, but I've come across people that use Git but never heard of both or are afraid to use them because they're scary. In fact, they're not scary. They have the ability to save your ass and make you find bugs faster. Isn't that _Awesome_?

!http://jeffkreeftmeijer.com/images/awesome.jpg(Awesome robot dinosaurs)!

h3. The mighty reflog

You just did a @git reset@ that put you a couple of commits back or you just rebased your whole repository into one commit (don't do that) and you realize you didn't really want that.

You probably knew you can reset commits, but did you know you can do that -- and more -- on a lot of _actions_ (like merges, pulls and rebases) as well? Simply use @git reflog@ to get an overview of the last actions you did:

{% highlight console %}
$ git reflog
0db8285 HEAD@{0}: HEAD~5: updating HEAD
177762a HEAD@{1}: commit: change affiliate field names
bb5d920 HEAD@{2}: pull origin develop: Merge made by recursive.
f6fade5 HEAD@{3}: commit: sort the category brands by name on ...
9309873 HEAD@{4}: checkout: moving from feature/affiliate to develop
92a80c2 HEAD@{5}: checkout: moving from develop to feature/affiliate
{% endhighlight %}

Because every action in this list has a SHA1 hash, you can use the commands you're familiar with. In our example, we want to reset to before we messed up:

{% highlight console %}
$ git reset 177762a
{% endhighlight %}

Now you moved back to right before you decided to reset or rebase. It's like nothing ever happened.

h3. The amazing bisect

Something broke and you found out it worked six commits ago (in the release tagged &ldquo;v0.1.24&rdquo;) by doing a quick @git checkout v0.1.24@ and running your tests. However, you don't know which commit introduced the bug, but you want to find out what changed, who did it and if you can revert it quickly.

A really quick way to do something like this is to use @git bisect@. After starting, you have to specify a &ldquo;good&rdquo; commit and a &ldquo;bad&rdquo; one. In this case you know the commit tagged &ldquo;v0.1.24&rdquo; worked and the &ldquo;develop&rdquo; branch is broken:

{% highlight console %}
$ git bisect start
$ git bisect good v0.1.24
$ git bisect bad develop
Bisecting: 2 revisions left to test after this (roughly 1 step)
[5dec197fedabd9db02cc1621f5bbdb2e8defeb48] Merge branch hotfix/...
{% endhighlight %}

What happened? Well, you switched off your development branch and @git bisect@ took you back three commits so you're at the one in the middle between the &ldquo;good&rdquo; and the &ldquo;bad&rdquo; one.

Next, run your tests and see if the bug was in this commit already. Let's say it was, so you mark this commit &ldquo;bad&rdquo; as well:

{% highlight console %}
$ git bisect bad
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[9dea486b10f14475beb56e9d67c6dd45c8fab088] sort the category ...
{% endhighlight %}

You're taken to the next commit to test and you find out it worked in this one, so you mark it &ldquo;good&rdquo; and Git will tell you the commit that broke stuff:

{% highlight console %}
$ git bisect good
154f34cd41619eaace63122480c8aa7180f7dbe6 is the first bad commit
commit 154f34cd41619eaace63122480c8aa7180f7dbe6
Author: Thijs Cadier
Date:   Sat Aug 28 19:20:40 2010 +0200

    An editor can publish a photo
{% endhighlight %}

Now we know which commit introduced the bug, so you can use @git show@ to see what changed and fix it -- or maybe even use @git revert@ -- right away. Did you do this manually before? I did and I can tell you bisecting is a _lot_ faster.

h3. Want more?

These are all use-cases that I've run into, but the commands I talked about have a lot more cool features you might want to check out. Two good places to start would be "Git Ready":http://gitready.com by "@qrush(Nick Quaranto)":http://twitter.com/qrush and "the Git Community Book":http://book.git-scm.com/, since they explain stuff like "reflogging":http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html and "bisecting":http://book.git-scm.com/5_finding_issues_-_git_bisect.html more thoroughly.
