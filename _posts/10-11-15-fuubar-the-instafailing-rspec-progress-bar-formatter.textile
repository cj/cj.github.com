---
layout: post
title: "Fuubar: the instafailing RSpec progress bar formatter"
excerpt: Combining the work of Nick Evans and Michael Grosser in an attempt to create a better RSpec formatter
published: true
category: fuubar
---

As you might have noticed, I've been spending some time trying to get running test suites with "RSpec":https://github.com/rspec a bit better and faster over the last weeks. This week I looked into RSpec's formatters.

!http://jeffkreeftmeijer.com/images/fuubar.png!

Aside from the red "F" RSpec will output when a spec fails, there's no direct feedback that allows you to go fix things immediately. You'll simply have to wait until your whole suite is done running, or use ^C to interrupt the run. Another thing you can do is use "the @--fail-fast@ option I wrote about last week":http://jeffkreeftmeijer.com/2010/making-rspec-stop-operation-immediately-after-failing or check out "rspec-instafail":https://github.com/grosser/rspec-instafail, which will output the failure details while continuing to run the rest of your specs. Nice.

Besides that, I realized there were more things that could be improved on, like knowing the total number of specs, the number of specs that have run already and maybe even an ETA or something like that. Also, the big string of dots and "F"'s started to seem unnecessary, there should be a nicer way to display this information.

I checked out RSpec's formatters and realized it was extremely easy to write one, so I got distracted and wrote "FffuuuFormatter":http://gist.github.com/676219, which makes RSpec print FFFUUU instead of FFFFF. Heh.

h3. Fuubar

After looking around for a bit, I found an article by "@nick_evans(Nicholas Evans)":http://twitter.com/nick_evans posted in 2008, in which he tried to fix some of the issues I'm having with a "progress bar formatter":http://ekenosen.net/nick/devblog/2008/12/better-progress-bar-for-rspec. Nick wrote a really nice solution for it using the "progressbar gem":http://rubygems.org/gems/progressbar by "@peleteiro(Jose Peleteiro)":http://twitter.com/peleteiro.

I decided to continue Nick's work and got the formatter up to speed with RSpec 2, using rspec-instafail to handle the direct feedback after every failure.  I put the whole thing in a gem and "@josevalim(Jos√© Valim)":http://twitter.com/josevalim came up with the name: "Fuubar":http://github.com/jeffkreeftmeijer/fuubar.

Here's a "short video of Fuubar in action":http://vimeo.com/16845253:

<object width="440" height="350">
  <param name="allowfullscreen" value="true" />
  <param name="allowscriptaccess" value="always" />
  <param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=16845253&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=ff9933&amp;fullscreen=1" />
  <embed src="http://vimeo.com/moogaloop.swf?clip_id=16845253&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=ff9933&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always"  width="440" height="350"></embed>
</object>

Installing Fuubar is easy. Just put it in your @Gemfile@ and run your specs like this from now on:

{% highlight console %}
$ rspec --format Fuubar --color spec
{% endhighlight %}

If you want to use Fuubar as your default formatter, simply put the options in your @.rspec@ file:

bc. --format Fuubar
--color

After doing that you can simply run your specs like you're used to:

{% highlight console %}
$ rspec spec
{% endhighlight %}

h3. Fuuture

As always: Let me know how you like it and be sure to create an "issue on Github":http://github.com/jeffkreeftmeijer/fuubar/issues, send me a "Github message":https://github.com/inbox/new/jeffkreeftmeijer or an "email":http://jeffkreeftmeijer.com/contact/ if you have any ideas or run into any issues. Of course you can always fork the project and send me a pull request or a patch via email.

Fuubar only works on RSpec 2 right now, but there's no reason why it would be impossible to make it compatible with earlier versions. Also, Nick's original code had some functionality to find slow specs, but I omitted it because I couldn't really find a nice implementation.

So, there's still a lot to do but I think this is quite an improvement from the current formatters. Maybe we can even turn this into a patch for RSpec to make Fuubar one of the default formatters. What do you think?
