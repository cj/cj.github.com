---
layout: post
title: Node.js, web sockets and talking mice
excerpt: Wrapping up my Node.js web socket experiment with a mouse chat.
published: true
head: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"></script><script src="/js/jquery.js"></script><script src="/js/json.js"></script><script src="/js/socket/socket.io.js"></script><script src="/js/mice.js"></script> <link rel="stylesheet" href="/css/mice.css"/>
---

<div class="notice" id="mouse_toggle">
  If you see extra mouse cursors moving around: don't worry, they're part of the demo. You can always <a href="#">disable</a> them if you want.
</div>

Since my first two articles about my "Node.js":http://nodejs.org experiment were a great success, got a lot of reponses and even inspired some people to get their hands dirty, I decided to dive into the demo code once more and write a very last article about it. 

If you have no idea what this is all about, please start by reading &ldquo;["Experimenting with Node.js":http://jeffkreeftmeijer.com/2010/experimenting-with-node-js]&rdquo; and &ldquo;["Things I learned from my Node.js experiment":http://jeffkreeftmeijer.com/2010/things-i-learned-from-my-node.js-experiment]&rdquo;.

This time, I've added the ability to chat with other cursors -- with "Gravatar":http://en.gravatar.com support! -- you can try it out by putting your e-mail address in the left input, your message in the right and hitting enter.

<form id="chat">
  <input class="placeholder" id="email" placeholder="E-mail address"/><input class="placeholder" id="text" maxlength="140" placeholder="Message"/><input type="submit" style="display:none;"/>
</form>

<p class="small">I'm only using your e-mail address to fetch your Gravatar. I'm not saving anything.</p>

When you submit the form, it sends your e-mail address and message to the web socket server. After your e-mail address is encrypted to MD5 with Node's "crypto":http://nodejs.org/api.html#crypto-236 module, it gets broadcasted to the other clients together with your message:

{% highlight javascript %}
if(request.action == 'speak') {
  request.email = crypto.createHash('md5').
                  update(request.email).digest("hex");
  client.send(json(request));
}

request.id = client.sessionId
client.broadcast(json(request));
{% endhighlight %}

The encrypted e-mail address and message also get sent back to the client it came from, to be able to show users their own messages after sending them out.

When the message gets received on the client side, a bit of "jQuery":http://jquery.com makes sure the Gravatar and the message get displayed:

{% highlight javascript %}
function speak(data){
  clearTimeout(timeouts[data['id']]);
  $('#mouse_'+data['id']+' img').remove();
  $('#mouse_'+data['id']).append('<img src="http://www.gravatar.com/avatar/' + data['email'] + '?s=20" />');
    
  if(data['text'] == '') {    
    return $('#mouse_'+data['id']+' .chat').hide();
  }
  
  $('#mouse_'+data['id']+' .chat').show().html(data['text']);   
  timeouts[data['id']] = setTimeout("$('#mouse_"+data['id']+" .chat').hide()", 5000)
};
{% endhighlight %}

Also, a timeout gets created that removes the message from the screen after five seconds to try to keep your screen from overflowing.

Like before, the "Gist":http://gist.github.com/488562 with all the code I wrote for the experiment is updated in case you want to use it to build something awesome. If you do, please let me know. I'd love to see what you come up with and I might even write another very last article. 

That wraps up my Node.js-web-socket-mouse-cursor-experiment, thanks again for the responses everyone. You certainly helped me out a lot trying to build this thing. As you might have guessed, I'm seriously excited about Node.js and there will probably be more experiments and articles like this. 

Stay tuned and please let me know how you liked the experiment in the comments.

